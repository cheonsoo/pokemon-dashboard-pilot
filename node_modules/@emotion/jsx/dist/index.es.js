import { createElement, Fragment } from 'react';
import { consume } from '@emotion/core';
import { getRegisteredStyles, insertStyles, shouldSerializeToReactTree } from '@emotion/utils';
import { serializeStyles } from '@emotion/serialize';

var jsx = function jsx(type, props) {
  var _arguments = arguments;

  if (props == null || props.css == null || type.__emotion_component === true) {
    // $FlowFixMe
    return createElement.apply(undefined, arguments);
  }

  if (typeof props.css === 'string' && // check if there is a css declaration
  props.css.indexOf(':') !== -1 && process.env.NODE_ENV !== 'production') {
    throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/css' like this: css`" + props.css + "`");
  }

  return consume(function (context) {
    var registeredStyles = [];
    var className = '';

    if (props.className !== undefined) {
      className = getRegisteredStyles(context.registered, registeredStyles, props.className);
    }

    registeredStyles.push(typeof props.css === 'function' ? props.css(context.theme) : props.css);
    var serialized = serializeStyles(context.registered, registeredStyles);
    var rules = insertStyles(context, serialized);
    className += "css-" + serialized.name;
    var newProps = {};

    for (var key in props) {
      if (Object.prototype.hasOwnProperty.call(props, key) && key !== 'css') {
        newProps[key] = props[key];
      }
    }

    newProps.className = className;
    var childrenLength = _arguments.length;
    var createElementArgArray = Array(childrenLength);
    createElementArgArray[0] = type;
    createElementArgArray[1] = newProps;

    for (var i = 2; i < childrenLength; i++) {
      createElementArgArray[i] = _arguments[i];
    } // $FlowFixMe


    var ele = createElement.apply(undefined, createElementArgArray);

    if (shouldSerializeToReactTree && rules !== undefined) {
      return createElement(Fragment, null, createElement("style", {
        "data-emotion-ssr": serialized.name,
        dangerouslySetInnerHTML: {
          __html: rules
        }
      }), ele);
    }

    return ele;
  });
};

export default jsx;
//# sourceMappingURL=index.es.js.map
